platform :ios, '14.0'

# Disable CocoaPods analytics.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

# Keep Xcode build configurations mapping for Runner project (optional but common).
project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

# Resolve Flutter SDK path via Generated.xcconfig, then load Flutter's pod helper.
def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "Generated.xcconfig must exist. If you're running pod install manually, make sure 'flutter pub get' was run first."
  end
  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "Could not find FLUTTER_ROOT. Check Generated.xcconfig."
end

require File.expand_path(File.join(flutter_root, 'packages', 'flutter_tools', 'bin', 'podhelper.rb'))

# Optional: Build pods as frameworks and use modular headers (common with Flutter + Swift)
use_frameworks!
use_modular_headers!

install! 'cocoapods', :deterministic_uuids => false

flutter_ios_podfile_setup

target 'Runner' do
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    # Apply Flutter post_install first (it may mutate settings)
    flutter_additional_ios_build_settings(target)

    target.build_configurations.each do |config|
      # Align all pods to iOS 14.0 (required for Xcode 16 toolchain stability)
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
      # Disable code signing for CocoaPods targets to avoid Dev cert/profile requirements during archive
      # The app target (Runner) will be signed; pods do not need signing.
      config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
      config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
      config.build_settings['DEVELOPMENT_TEAM'] = ''
      config.build_settings['CODE_SIGN_IDENTITY'] = ''
      config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = ''

      # Strip unsupported uppercase "-G" flags (and variants like -G0) that cause failures with Xcode 16/clang
      # Keep lowercase -g (debug info) intact.
      strip_bad_G = lambda do |val|
        if val.is_a?(String)
          # Remove standalone -G or -G<number> tokens
          val = val.gsub(/(^|\s)-G\d*(?=\s|$)/, ' ')
          # Collapse multiple spaces
          val.gsub(/\s+/, ' ').strip
        elsif val.is_a?(Array)
          val.reject { |e| e.to_s.strip.match?(/^-(?:G\d*)$/) }
        else
          val
        end
      end

      %w[OTHER_CFLAGS OTHER_CPLUSPLUSFLAGS OTHER_LDFLAGS OTHER_SWIFT_FLAGS].each do |key|
        config.build_settings[key] = strip_bad_G.call(config.build_settings[key])
      end
    end
  end
end
