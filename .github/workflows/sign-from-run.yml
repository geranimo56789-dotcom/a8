name: Sign iOS from run artifacts and upload

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: GitHub Actions run ID to fetch artifacts from (e.g., 17898173687)
        required: true
        default: ''
      bundle_id:
        description: iOS Bundle ID (defaults to vars.IOS_BUNDLE_ID)
        required: false
        default: ''
      team_id:
        description: Apple Developer Team ID (defaults to vars.IOS_DEVELOPMENT_TEAM)
        required: false
        default: ''
      upload:
        description: Upload to TestFlight after signing
        required: false
        default: 'true'
      prefer:
        description: Prefer archive or ipa when both exist (archive|ipa)
        required: false
        default: 'archive'

permissions:
  contents: read

env:
  IOS_BUNDLE_ID: ${{ inputs.bundle_id != '' && inputs.bundle_id || vars.IOS_BUNDLE_ID }}
  IOS_DEVELOPMENT_TEAM: ${{ inputs.team_id != '' && inputs.team_id || vars.IOS_DEVELOPMENT_TEAM }}

jobs:
  sign-upload:
    runs-on: macos-15
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16'

      - name: Validate inputs
        run: |
          set -e
          if [ -z "${{ inputs.run_id }}" ]; then echo "run_id is required"; exit 1; fi
          if [ -z "${IOS_BUNDLE_ID}" ]; then echo "Missing IOS_BUNDLE_ID (set vars or provide input)"; exit 1; fi
          if [ -z "${IOS_DEVELOPMENT_TEAM}" ]; then echo "Missing IOS_DEVELOPMENT_TEAM (set vars or provide input)"; exit 1; fi

      - name: Download artifacts from run
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -e
          mkdir -p inputs && cd inputs
          echo "Downloading artifacts from run ${{ inputs.run_id }}"
          # Try to download known artifact names
          gh run download ${{ inputs.run_id }} --name ios-xcarchive -R ${{ github.repository }} || true
          gh run download ${{ inputs.run_id }} --name ios-unsigned-ipa -R ${{ github.repository }} || true
          echo "Downloaded files:"
          find . -maxdepth 4 -type f -print | sed 's#^#  #'

      - name: Locate archive or IPA
        id: locate
        run: |
          set -e
          # Look for an .xcarchive directory anywhere under inputs/
          ARCHIVE_DIR=$(find inputs -type d -name "*.xcarchive" -print -quit || true)
          IPA_PATH=$(find inputs -type f -name "*.ipa" -print -quit || true)
          echo "Found archive: ${ARCHIVE_DIR:-<none>}"
          echo "Found IPA: ${IPA_PATH:-<none>}"
          # Decide which to use
          CHOICE=""
          if [ -n "$ARCHIVE_DIR" ] && [ '${{ inputs.prefer }}' = 'archive' ]; then CHOICE="archive"; fi
          if [ -z "$CHOICE" ] && [ -n "$IPA_PATH" ] && [ '${{ inputs.prefer }}' = 'ipa' ]; then CHOICE="ipa"; fi
          if [ -z "$CHOICE" ]; then
            if [ -n "$ARCHIVE_DIR" ]; then CHOICE="archive"; elif [ -n "$IPA_PATH" ]; then CHOICE="ipa"; fi
          fi
          if [ -z "$CHOICE" ]; then echo "No archive or IPA found in downloaded artifacts" >&2; exit 1; fi
          echo "choice=$CHOICE" >> $GITHUB_OUTPUT
          if [ "$CHOICE" = "archive" ]; then echo "archive=$ARCHIVE_DIR" >> $GITHUB_OUTPUT; else echo "ipa=$IPA_PATH" >> $GITHUB_OUTPUT; fi

      - name: Import Distribution certificate (.p12)
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.IOS_CERT_P12_BASE64 }}
          p12-password: ${{ secrets.IOS_CERT_PASSWORD }}

      - name: Install provisioning profile
        id: install_provisioning_profile
        env:
          IOS_MOBILEPROVISION_BASE64: ${{ secrets.IOS_MOBILEPROVISION_BASE64 }}
        run: |
          set -e
          if [ -z "$IOS_MOBILEPROVISION_BASE64" ]; then echo "Missing IOS_MOBILEPROVISION_BASE64 secret" >&2; exit 1; fi
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          echo "$IOS_MOBILEPROVISION_BASE64" | base64 --decode > "$HOME/Library/MobileDevice/Provisioning Profiles/profile.mobileprovision"
          security cms -D -i "$HOME/Library/MobileDevice/Provisioning Profiles/profile.mobileprovision" > profile.plist
          NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' profile.plist)
          UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' profile.plist)
          echo "Using profile: $NAME ($UUID)"
          echo "profile_name=$NAME" >> $GITHUB_OUTPUT
          echo "profile_uuid=$UUID" >> $GITHUB_OUTPUT

      - name: Export signed IPA from archive
        if: steps.locate.outputs.choice == 'archive'
        run: |
          set -e
          ARCHIVE_DIR='${{ steps.locate.outputs.archive }}'
          cat > exportOptions.plist <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>app-store-connect</string>
            <key>signingStyle</key><string>manual</string>
            <key>teamID</key><string>${IOS_DEVELOPMENT_TEAM}</string>
            <key>signingCertificate</key><string>Apple Distribution</string>
            <key>provisioningProfiles</key><dict>
              <key>${IOS_BUNDLE_ID}</key><string>${{ steps.install_provisioning_profile.outputs.profile_name }}</string>
            </dict>
            <key>compileBitcode</key><false/>
            <key>stripSwiftSymbols</key><true/>
            <key>destination</key><string>export</string>
          </dict></plist>
          PLIST
          mkdir -p out
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_DIR" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath out | tee xcodebuild-export.log

      - name: Re-sign unsigned IPA (fallback)
        if: steps.locate.outputs.choice == 'ipa'
        run: |
          set -e
          IPA='${{ steps.locate.outputs.ipa }}'
          mkdir -p work && cd work
          unzip -q "$IPA"
          APP="Payload/Runner.app"
          cp "$HOME/Library/MobileDevice/Provisioning Profiles/profile.mobileprovision" "$APP/embedded.mobileprovision"
          security cms -D -i "$HOME/Library/MobileDevice/Provisioning Profiles/profile.mobileprovision" > profile.plist
          /usr/libexec/PlistBuddy -x -c 'Print :Entitlements' profile.plist > entitlements.plist
          find "$APP/Frameworks" -maxdepth 2 \( -name "*.framework" -or -name "*.dylib" \) -print0 | while IFS= read -r -d '' F; do
            codesign -f -s "Apple Distribution" "$F"
          done
          codesign -f -s "Apple Distribution" --entitlements entitlements.plist "$APP"
          cd ..
          mkdir -p out
          (cd work && zip -qry "../out/Runner-signed.ipa" Payload)

      - name: Discover IPA path
        if: inputs.upload == 'true'
        id: discover_ipa
        run: |
          set -e
          ls -lh out || true
          IPA=$(ls -1 out/*.ipa 2>/dev/null | head -n 1 || true)
          if [ -z "$IPA" ]; then
            echo "No IPA found in ./out. Check xcodebuild-export.log above for export errors (e.g., provisioningProfiles name mismatch)." >&2
            exit 1
          fi
          echo "Found IPA: $IPA"
          echo "ipa=$IPA" >> $GITHUB_OUTPUT

      - name: Upload to TestFlight (API key)
        if: inputs.upload == 'true'
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: ${{ steps.discover_ipa.outputs.ipa }}
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-signed-from-run
          path: |
            out/*.ipa
            xcodebuild-export.log
            profile.plist
            exportOptions.plist
          if-no-files-found: warn
