name: Build & Upload iOS (Tag)

on:
  push:
    tags:
      - 'ios-*'

concurrency:
  group: build-upload-${{ github.ref_name }}
  cancel-in-progress: false

env:
  # Customize build configuration
  SCHEME: Runner
  WORKSPACE: ios/Runner.xcworkspace
  CONFIGURATION: Release
  EXPORT_METHOD: app-store
  DERIVED_DATA: build/derived_data

jobs:
  build-upload:
    runs-on: macos-15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate tag vs pubspec version
        run: |
          set -euo pipefail
          TAG="${GITHUB_REF_NAME}"
          # Expect tags like ios-1.0.0 or ios-1.2.3
          if [[ ! $TAG =~ ^ios-[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Tag $TAG does not match expected pattern ios-x.y.z" 1>&2
            exit 1
          fi
          EXPECTED_VERSION=${TAG#ios-}
          FILE_VERSION=$(grep '^version:' pubspec.yaml | head -n1 | awk '{print $2}' | cut -d+ -f1)
          echo "Tag version: $EXPECTED_VERSION"; echo "pubspec version: $FILE_VERSION";
            if [[ "$EXPECTED_VERSION" != "$FILE_VERSION" ]]; then
            echo "Version mismatch: tag expects $EXPECTED_VERSION but pubspec.yaml has $FILE_VERSION" 1>&2
            exit 1
          fi
          echo "Version match confirmed."

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Flutter pub get
        run: flutter pub get

      - name: Select Xcode 16.4
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'

      - name: Install CocoaPods dependencies
        working-directory: ios
        run: |
          set -euo pipefail
          pod repo update || true
          pod install --verbose

      - name: Decode signing assets
        id: signing
        run: |
          set -euo pipefail
          mkdir -p ~/certs
          # Expected secrets:
          #  APPSTORE_PRIVATE_KEY (for upload only)
          #  APPSTORE_KEY_ID
          #  APPSTORE_ISSUER_ID
          #  IOS_DIST_CERT_B64 (base64 of .p12)
          #  IOS_DIST_CERT_PASSWORD (password protecting .p12)
          #  IOS_PROVISION_PROFILE_B64 (base64 of .mobileprovision)
          if [[ -z "${{ secrets.IOS_DIST_CERT_B64 }}" || -z "${{ secrets.IOS_PROVISION_PROFILE_B64 }}" ]]; then
            echo "Missing IOS_DIST_CERT_B64 or IOS_PROVISION_PROFILE_B64" 1>&2
            exit 1
          fi
          echo '${{ secrets.IOS_DIST_CERT_B64 }}' | base64 --decode > ~/certs/dist.p12
          echo '${{ secrets.IOS_PROVISION_PROFILE_B64 }}' | base64 --decode > ~/certs/profile.mobileprovision
          security create-keychain -p temp_keychain build.keychain
          security set-keychain-settings build.keychain
          security unlock-keychain -p temp_keychain build.keychain
          security import ~/certs/dist.p12 -k build.keychain -P '${{ secrets.IOS_DIST_CERT_PASSWORD }}' -T /usr/bin/codesign -T /usr/bin/security
          security list-keychain -d user -s build.keychain
          # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          UUID=$(grep -a -A1 '<key>UUID</key>' ~/certs/profile.mobileprovision | grep -a -Eo '[-A-F0-9]{36}' | head -n1 || true)
          cp ~/certs/profile.mobileprovision "~/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
          echo "PROFILE_UUID=$UUID" >> $GITHUB_OUTPUT

      - name: Flutter build ipa (unsigned xcarchive step)
        run: |
          set -euo pipefail
          flutter build ipa --release --no-codesign

      - name: Xcode archive (signed)
        run: |
          set -euo pipefail
          # Derive provisioning profile specifier from the profile if needed (fallback to UUID)
          PROFILE_SPECIFIER=${{ steps.signing.outputs.PROFILE_UUID }}
          xcodebuild -workspace "$WORKSPACE" -scheme "$SCHEME" -configuration "$CONFIGURATION" -destination 'generic/platform=iOS' -archivePath build/Runner.xcarchive clean archive DEVELOPMENT_TEAM=K68A6FQABT CODE_SIGN_STYLE=Manual PROVISIONING_PROFILE_SPECIFIER="$PROFILE_SPECIFIER" CODE_SIGN_IDENTITY="Apple Distribution"

      - name: Export IPA
        run: |
          set -euo pipefail
          cat > ExportOptions.plist <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>compileBitcode</key>
            <false/>
            <key>destination</key>
            <string>export</string>
            <key>manageAppVersionAndBuildNumber</key>
            <false/>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>teamID</key>
            <string>K68A6FQABT</string>
          </dict>
          </plist>
          EOF
          xcodebuild -exportArchive -archivePath build/Runner.xcarchive -exportPath build/export -exportOptionsPlist ExportOptions.plist
          ls -R build/export || true
          IPA_PATH=$(find build/export -maxdepth 2 -name '*.ipa' | head -n1)
          if [[ -z "$IPA_PATH" ]]; then echo 'No IPA produced' 1>&2; exit 1; fi
          echo "IPA_PATH=$IPA_PATH" >> $GITHUB_ENV

      - name: Extract Info.plist metadata
        run: |
          set -euo pipefail
          TMPDIR=ipa_unzipped
          rm -rf "$TMPDIR" && mkdir "$TMPDIR"
          unzip -q "$IPA_PATH" -d "$TMPDIR"
          PLIST=$(find "$TMPDIR/Payload" -maxdepth 2 -name Info.plist | head -n1)
          if [[ -z "$PLIST" ]]; then echo 'Info.plist not found' 1>&2; exit 1; fi
          /usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' "$PLIST" || true
          BUNDLE_ID=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' "$PLIST")
          SHORT_VERSION=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleShortVersionString' "$PLIST")
          BUILD_NUMBER=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleVersion' "$PLIST")
          echo "BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV
          echo "SHORT_VERSION=$SHORT_VERSION" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          cat > build-metadata.json <<JSON
          {
            "bundle_id": "${BUNDLE_ID}",
            "short_version": "${SHORT_VERSION}",
            "build_number": "${BUILD_NUMBER}",
            "tag": "${GITHUB_REF_NAME}",
            "ipa_path": "${IPA_PATH}"
          }
          JSON

      - name: Upload metadata artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-metadata-${{ github.ref_name }}
          path: build-metadata.json
          if-no-files-found: error

      - name: Append release notes (create or update release)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          TAG=${GITHUB_REF_NAME}
          NOTES="Version: $SHORT_VERSION (Build $BUILD_NUMBER)\nBundle: $BUNDLE_ID\nTag: $TAG"
          # Try to update existing release, else create
          if gh release view "$TAG" >/dev/null 2>&1; then
            gh release edit "$TAG" --notes "$NOTES" || true
          else
            gh release create "$TAG" --notes "$NOTES" || true
          fi

      - name: Prepare App Store Connect API key
        id: apikey
        run: |
          set -euo pipefail
          KEY='${{ secrets.APPSTORE_PRIVATE_KEY }}'
          KEY_ID='${{ secrets.APPSTORE_KEY_ID }}'
          ISSUER='${{ secrets.APPSTORE_ISSUER_ID }}'
          if [[ ${#KEY} -gt 50 && "$KEY" == *"BEGIN PRIVATE KEY"* && -n "$KEY_ID" && -n "$ISSUER" ]]; then
            mkdir -p ~/.appstoreconnect/private_keys
            echo "$KEY" > ~/.appstoreconnect/private_keys/AuthKey_${KEY_ID}.p8
            echo "present=true" >> $GITHUB_OUTPUT
          else
            echo "present=false" >> $GITHUB_OUTPUT
            echo "API key invalid" 1>&2
            exit 1
          fi

      - name: Upload via iTMSTransporter
        if: steps.apikey.outputs.present == 'true'
        env:
          KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
          ISSUER: ${{ secrets.APPSTORE_ISSUER_ID }}
        run: |
          set -euo pipefail
          ARGS=( -m upload -assetFile "$IPA_PATH" -apiKey "$KEY_ID" -apiIssuer "$ISSUER" -v informational )
          echo "xcrun iTMSTransporter ${ARGS[*]}"
          xcrun iTMSTransporter "${ARGS[@]}"

      - name: Slack notify
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [[ -z "$SLACK_WEBHOOK_URL" ]]; then echo 'No Slack webhook configured'; exit 0; fi
          STATUS="FAILED"
          COLOR="#ff4d4f"
          if grep -q "Package Summary" transporter.log 2>/dev/null || [[ "${SHORT_VERSION:-}" != "" ]]; then STATUS="SUCCESS"; COLOR="#36a64f"; fi
          payload=$(cat <<JSON
          {
            "attachments": [
              {
                "color": "$COLOR",
                "title": "iOS Build & Upload $STATUS",
                "fields": [
                  {"title": "Tag", "value": "${GITHUB_REF_NAME}", "short": true},
                  {"title": "Version", "value": "${SHORT_VERSION:-n/a} (${BUILD_NUMBER:-n/a})", "short": true},
                  {"title": "Repo", "value": "${{ github.repository }}", "short": true}
                ]
              }
            ]
          }
          JSON
          )
          curl -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL" || echo 'Slack post failed'

      - name: Attach IPA to GitHub Release (optional convenience)
        if: success()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          TAG=${GITHUB_REF_NAME}
          if [[ -f "$IPA_PATH" ]]; then
            gh release create "$TAG" "$IPA_PATH" --notes "Automated build for $TAG" || gh release upload "$TAG" "$IPA_PATH" --clobber
          fi

      - name: Summary
        run: |
          echo "IPA built and upload initiated. App Store Connect processing may take several minutes."