name: Upload IPA to TestFlight

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: Release tag containing the IPA asset
        required: true
      asset_name:
        description: IPA filename in the release (exact match)
        required: true
      itc_provider:
        description: Optional ITC provider short name if your account has multiple providers
        required: false
        default: ""

jobs:
  upload:
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'

      - name: Accept Xcode license and show tool versions
        run: |
          set -euo pipefail
          sudo xcodebuild -license accept
          xcodebuild -version
          xcrun --version || true
          which iTMSTransporter || true
          xcrun iTMSTransporter -version || true

      - name: Download IPA from release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          gh release download "${{ inputs.release_tag }}" -p "${{ inputs.asset_name }}" -O "${{ inputs.asset_name }}"
          ls -la

      - name: Prepare credentials env
        run: |
          set -euo pipefail
          # Save flags to detect which path is available
          USE_API_KEY=false
          APPSTORE_PRIVATE_KEY='${{ secrets.APPSTORE_PRIVATE_KEY }}'
          APPSTORE_KEY_ID='${{ secrets.APPSTORE_KEY_ID }}'
          APPSTORE_ISSUER_ID='${{ secrets.APPSTORE_ISSUER_ID }}'
          if [[ -n "$APPSTORE_PRIVATE_KEY" && -n "$APPSTORE_KEY_ID" && -n "$APPSTORE_ISSUER_ID" ]]; then
            USE_API_KEY=true
            mkdir -p ~/.appstoreconnect/private_keys
            echo "$APPSTORE_PRIVATE_KEY" > ~/.appstoreconnect/private_keys/AuthKey_${APPSTORE_KEY_ID}.p8
          fi
          echo "USE_API_KEY=$USE_API_KEY" >> $GITHUB_ENV
          # Also export Apple ID vars for later use
          echo "APPLE_ID_EMAIL=${{ secrets.APPLE_ID_EMAIL }}" >> $GITHUB_ENV
          echo "APPLE_APP_SPECIFIC_PASSWORD=${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" >> $GITHUB_ENV

      - name: Upload via API Key (preferred)
        continue-on-error: true
        env:
          KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
          ISSUER: ${{ secrets.APPSTORE_ISSUER_ID }}
        run: |
          set -euo pipefail
          if [[ "${USE_API_KEY}" == "true" ]]; then
            ARGS=( -m upload -assetFile "${{ inputs.asset_name }}" -apiKey "$KEY_ID" -apiIssuer "$ISSUER" -v informational )
            if [[ -n "${{ inputs.itc_provider }}" ]]; then ARGS+=( -itc_provider "${{ inputs.itc_provider }}" ); fi
            xcrun iTMSTransporter "${ARGS[@]}"
            echo "UPLOAD_DONE=true" >> $GITHUB_ENV
          else
            echo "API key not configured; skipping this step."
          fi

      - name: Upload via Apple ID with Fastlane (no .p8)
        if: always()
        env:
          FASTLANE_USER: ${{ secrets.APPLE_ID_EMAIL }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          set -euo pipefail
          if [[ -z "${UPLOAD_DONE:-}" && -n "${FASTLANE_USER}" && -n "${FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD}" ]]; then
            echo "Installing fastlane..."
            sudo gem install fastlane --no-document
            echo "Fastlane version: $(fastlane --version)"
            PILOT_ARGS=( upload --ipa "${{ inputs.asset_name }}" --skip_waiting_for_build_processing true )
            if [[ -n "${{ inputs.itc_provider }}" ]]; then PILOT_ARGS+=( --itc_provider "${{ inputs.itc_provider }}" ); fi
            fastlane pilot "${PILOT_ARGS[@]}"
            echo "UPLOAD_DONE=true" >> $GITHUB_ENV
          else
            echo "Apple ID app-specific password not configured or upload already succeeded; skipping Fastlane path."
          fi

      - name: Fail if no upload occurred
        if: always()
        run: |
          if [[ "${UPLOAD_DONE:-}" != "true" ]]; then
            echo "No upload performed. Configure either API key (APPSTORE_PRIVATE_KEY/KEY_ID/ISSUER_ID) or Apple ID app-specific password (APPLE_ID_EMAIL/APPLE_APP_SPECIFIC_PASSWORD)." 1>&2
            exit 1
          fi